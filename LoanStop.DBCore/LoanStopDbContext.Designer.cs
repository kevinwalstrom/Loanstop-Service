//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework DbContext template.
// Code is generated on: 5/24/2014 1:52:26 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.ModelConfiguration;
using System.Data.Entity.ModelConfiguration.Conventions;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;

namespace LoanStopModel
{
    #region LoanStopEntities
    public partial class LoanStopEntities : DbContext
    {
        #region Constructors

        /// <summary>
        /// Initialize a new LoanStopEntities object.
        /// </summary>
        public LoanStopEntities() :
                base(GetDefaultConnection(), true)
        {
            Configure();
        }

        private static DbConnection GetDefaultConnection() {

            DbProviderFactory factory = DbProviderFactories.GetFactory("MySql.Data.MySqlClient");
            DbConnection connection = factory.CreateConnection();
            connection.ConnectionString = @"Persist Security Info=True;server=us-cdbr-azure-west-b.cleardb.com;User Id=b91e321d074c50;password=5cfa9c6c;database=southdenver";
            return connection;
        }

        /// <summary>
        /// Initializes a new LoanStopEntities object using the connection string found in the 'LoanStopEntities' section of the application configuration file.
        /// </summary>
        public LoanStopEntities(string connectionString) :
                base(connectionString)
        {
            Configure();
        }

        /// <summary>
        /// Initialize a new LoanStopEntities object.
        /// </summary>
        public LoanStopEntities(DbConnection existingConnection, bool contextOwnsConnection) :
                base(existingConnection, contextOwnsConnection)
        {
            Configure();
        }

        /// <summary>
        /// Initialize a new LoanStopEntities object.
        /// </summary>
        public LoanStopEntities(ObjectContext objectContext, bool dbContextOwnsObjectContext) :
                base(objectContext, dbContextOwnsObjectContext)
        {
            Configure();
        }

        /// <summary>
        /// Initialize a new LoanStopEntities object.
        /// </summary>
        public LoanStopEntities(string nameOrConnectionString, DbCompiledModel model) :
                base(nameOrConnectionString, model)
        {
            Configure();
        }

        /// <summary>
        /// Initialize a new LoanStopEntities object.
        /// </summary>
        public LoanStopEntities(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection) :
                base(existingConnection, model, contextOwnsConnection)
        {
            Configure();
        }

        private void Configure()
        {
            this.Configuration.AutoDetectChangesEnabled = true;
            this.Configuration.LazyLoadingEnabled = true;
            this.Configuration.ProxyCreationEnabled = true;
            this.Configuration.ValidateOnSaveEnabled = true;
        }

        #endregion

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {

            #region AuxClient

            modelBuilder.Entity<AuxClient>()
                .HasKey(p => new { p.Id })
                .ToTable("aux_client");
            // Properties:
            modelBuilder.Entity<AuxClient>()
                .Property(p => p.Id)
                    .HasColumnName("id")
                    .IsRequired()
                    .HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)
                    .HasColumnType("uint");
            modelBuilder.Entity<AuxClient>()
                .Property(p => p.SsNumber)
                    .HasColumnName("ss_number")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<AuxClient>()
                .Property(p => p.JointAccountId)
                    .HasColumnName("joint_account_id")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<AuxClient>()
                .Property(p => p.Master)
                    .HasColumnName("master")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<AuxClient>()
                .Property(p => p.Email)
                    .HasColumnName("email")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<AuxClient>()
                .Property(p => p.Dob)
                    .HasColumnName("dob")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<AuxClient>()
                .Property(p => p.Occupation)
                    .HasColumnName("occupation")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<AuxClient>()
                .Property(p => p.Deposits)
                    .HasColumnName("deposits")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<AuxClient>()
                .Property(p => p.NetFromPaystubs)
                    .HasColumnName("net_from_paystubs")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<AuxClient>()
                .Property(p => p.RoutingNumber)
                    .HasColumnName("routing_number")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<AuxClient>()
                .Property(p => p.CellPhone)
                    .HasColumnName("cell_phone")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<AuxClient>()
                .Property(p => p.MonthlyFundsAvailable)
                    .HasColumnName("monthly_funds_available")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<AuxClient>()
                .Property(p => p.PreferredContactMethod)
                    .HasColumnName("preferred_contact_method")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<AuxClient>()
                .Property(p => p.DateFromPaystub)
                    .HasColumnName("date_from_paystub")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");

            #endregion

            #region Bounced

            modelBuilder.Entity<Bounced>()
                .HasKey(p => new { p.Id })
                .ToTable("bounced", "southdenver");
            // Properties:
            modelBuilder.Entity<Bounced>()
                .Property(p => p.Id)
                    .HasColumnName("id")
                    .IsRequired()
                    .HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)
                    .HasColumnType("uint");
            modelBuilder.Entity<Bounced>()
                .Property(p => p.Name)
                    .HasColumnName("name")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Bounced>()
                .Property(p => p.TransId)
                    .HasColumnName("trans_id")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Bounced>()
                .Property(p => p.CheckNumber)
                    .HasColumnName("check_number")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Bounced>()
                .Property(p => p.BounceType)
                    .HasColumnName("bounce_type")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Bounced>()
                .Property(p => p.DateBounced)
                    .HasColumnName("date_bounced")
                    .IsRequired()
                    .HasColumnType("datetime");
            modelBuilder.Entity<Bounced>()
                .Property(p => p.DatePaid)
                    .HasColumnName("date_paid")
                    .IsRequired()
                    .HasColumnType("datetime");

            #endregion

            #region CardTransaction

            modelBuilder.Entity<CardTransaction>()
                .HasKey(p => new { p.Id })
                .ToTable("card_transactions", "southdenver");
            // Properties:
            modelBuilder.Entity<CardTransaction>()
                .Property(p => p.Id)
                    .HasColumnName("id")
                    .IsRequired()
                    .HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)
                    .HasColumnType("uint");
            modelBuilder.Entity<CardTransaction>()
                .Property(p => p.SsNumber)
                    .HasColumnName("ss_number")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<CardTransaction>()
                .Property(p => p.Datetime)
                    .HasColumnName("datetime")
                    .IsRequired()
                    .HasColumnType("datetime");
            modelBuilder.Entity<CardTransaction>()
                .Property(p => p.Trnx)
                    .HasColumnName("trnx")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<CardTransaction>()
                .Property(p => p.LoadAmount)
                    .HasColumnName("load_amount")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<CardTransaction>()
                .Property(p => p.Fee)
                    .HasColumnName("fee")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<CardTransaction>()
                .Property(p => p.Total)
                    .HasColumnName("total")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<CardTransaction>()
                .Property(p => p.FeeDue)
                    .HasColumnName("fee_due")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<CardTransaction>()
                .Property(p => p.TotalDue)
                    .HasColumnName("total_due")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<CardTransaction>()
                .Property(p => p.TrnxId)
                    .HasColumnName("trnx_id")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<CardTransaction>()
                .Property(p => p.Status)
                    .HasColumnName("status")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");

            #endregion

            #region CashLog

            modelBuilder.Entity<CashLog>()
                .HasKey(p => new { p.Id })
                .ToTable("cash_log");
            // Properties:
            modelBuilder.Entity<CashLog>()
                .Property(p => p.Id)
                    .HasColumnName("id")
                    .IsRequired()
                    .HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)
                    .HasColumnType("uint");
            modelBuilder.Entity<CashLog>()
                .Property(p => p.TransactionType)
                    .HasColumnName("transaction_type")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<CashLog>()
                .Property(p => p.Amount)
                    .HasColumnName("amount")
                    .IsRequired()
                    .HasColumnType("decimal");
            modelBuilder.Entity<CashLog>()
                .Property(p => p.Description)
                    .HasColumnName("description")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<CashLog>()
                .Property(p => p.Employee)
                    .HasColumnName("employee")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<CashLog>()
                .Property(p => p.Date)
                    .HasColumnName("date")
                    .IsRequired()
                    .HasColumnType("datetime");
            modelBuilder.Entity<CashLog>()
                .Property(p => p.Timestamp)
                    .HasColumnName("timestamp")
                    .IsRequired()
                    .HasColumnType("timestamp");
            modelBuilder.Entity<CashLog>()
                .Property(p => p.SsNumber)
                    .HasColumnName("ss_number")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<CashLog>()
                .Property(p => p.PayableTo)
                    .HasColumnName("payable_to")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<CashLog>()
                .Property(p => p.TransactionNumber)
                    .HasColumnName("transaction_number")
                    .HasColumnType("uint");
            modelBuilder.Entity<CashLog>()
                .Property(p => p.Type)
                    .HasColumnName("type")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<CashLog>()
                .Property(p => p.Category)
                    .HasColumnName("category")
                    .HasMaxLength(100)
                    .HasColumnType("varchar");
            modelBuilder.Entity<CashLog>()
                .Property(p => p.Cleared)
                    .HasColumnName("cleared")
                    .IsRequired()
                    .HasColumnType("utinyint");
            modelBuilder.Entity<CashLog>()
                .Property(p => p.DateCleared)
                    .HasColumnName("date_cleared")
                    .HasColumnType("datetime");
            modelBuilder.Entity<CashLog>()
                .Property(p => p.ClearedBy)
                    .HasColumnName("cleared_by")
                    .HasMaxLength(100)
                    .HasColumnType("varchar");

            #endregion

            #region Checkbook

            modelBuilder.Entity<Checkbook>()
                .HasKey(p => new { p.Id })
                .ToTable("checkbook");
            // Properties:
            modelBuilder.Entity<Checkbook>()
                .Property(p => p.Id)
                    .HasColumnName("id")
                    .IsRequired()
                    .HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)
                    .HasColumnType("uint");
            modelBuilder.Entity<Checkbook>()
                .Property(p => p.TransactionType)
                    .HasColumnName("transaction_type")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Checkbook>()
                .Property(p => p.CheckNumber)
                    .HasColumnName("check_number")
                    .IsRequired()
                    .HasColumnType("uint");
            modelBuilder.Entity<Checkbook>()
                .Property(p => p.DateEntered)
                    .HasColumnName("date_entered")
                    .IsRequired()
                    .HasColumnType("datetime");
            modelBuilder.Entity<Checkbook>()
                .Property(p => p.PayableTo)
                    .HasColumnName("payable_to")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Checkbook>()
                .Property(p => p.Description)
                    .HasColumnName("description")
                    .HasMaxLength(100)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Checkbook>()
                .Property(p => p.Amount)
                    .HasColumnName("amount")
                    .IsRequired()
                    .HasColumnType("decimal");
            modelBuilder.Entity<Checkbook>()
                .Property(p => p.Type)
                    .HasColumnName("type")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Checkbook>()
                .Property(p => p.Category)
                    .HasColumnName("category")
                    .HasMaxLength(100)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Checkbook>()
                .Property(p => p.Employee)
                    .HasColumnName("employee")
                    .HasMaxLength(100)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Checkbook>()
                .Property(p => p.DateTime)
                    .HasColumnName("date_time")
                    .IsRequired()
                    .HasColumnType("datetime");
            modelBuilder.Entity<Checkbook>()
                .Property(p => p.Cleared)
                    .HasColumnName("cleared")
                    .IsRequired()
                    .HasColumnType("tinyint");
            modelBuilder.Entity<Checkbook>()
                .Property(p => p.SsNumber)
                    .HasColumnName("ss_number")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Checkbook>()
                .Property(p => p.DateCleared)
                    .HasColumnName("date_cleared")
                    .HasColumnType("datetime");
            modelBuilder.Entity<Checkbook>()
                .Property(p => p.ClearedBy)
                    .HasColumnName("cleared_by")
                    .HasMaxLength(100)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Checkbook>()
                .Property(p => p.TransactionNumber)
                    .HasColumnName("transaction_number")
                    .HasColumnType("uint");

            #endregion

            #region Client

            modelBuilder.Entity<Client>()
                .HasKey(p => new { p.Id })
                .ToTable("client");
            // Properties:
            modelBuilder.Entity<Client>()
                .Property(p => p.Id)
                    .HasColumnName("id")
                    .IsRequired()
                    .HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)
                    .HasColumnType("uint");
            modelBuilder.Entity<Client>()
                .Property(p => p.SsNumber)
                    .HasColumnName("ss_number")
                    .IsRequired()
                    .HasMaxLength(11)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.Lastname)
                    .HasColumnName("lastname")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.Firstname)
                    .HasColumnName("firstname")
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.Mi)
                    .HasColumnName("mi")
                    .HasMaxLength(2)
                    .HasColumnType("char");
            modelBuilder.Entity<Client>()
                .Property(p => p.DriverLicense)
                    .HasColumnName("driver_license")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.Employer)
                    .HasColumnName("employer")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.DateOpened)
                    .HasColumnName("date_opened")
                    .IsRequired()
                    .HasColumnType("date");
            modelBuilder.Entity<Client>()
                .Property(p => p.ApprovedBy)
                    .HasColumnName("approved_by")
                    .HasMaxLength(50)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.Status)
                    .HasColumnName("status")
                    .HasMaxLength(50)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.Address)
                    .HasColumnName("address")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.City)
                    .HasColumnName("city")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.State)
                    .HasColumnName("state")
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnType("char");
            modelBuilder.Entity<Client>()
                .Property(p => p.Zip)
                    .HasColumnName("zip")
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.HomePhone)
                    .HasColumnName("home_phone")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.WorkPhone)
                    .HasColumnName("work_phone")
                    .HasMaxLength(50)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.BankName)
                    .HasColumnName("bank_name")
                    .HasMaxLength(50)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.BankAccount)
                    .HasColumnName("bank_account")
                    .HasMaxLength(50)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.CheckLimit)
                    .HasColumnName("check_limit")
                    .HasMaxLength(50)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.AccountLimit)
                    .HasColumnName("account_limit")
                    .HasMaxLength(50)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.Store)
                    .HasColumnName("store")
                    .HasMaxLength(50)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.ReferredBy)
                    .HasColumnName("referred_by")
                    .HasMaxLength(50)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.UpdatedInfoDate)
                    .HasColumnName("updated_info_date")
                    .HasColumnType("date");
            modelBuilder.Entity<Client>()
                .Property(p => p.PaydaySchedule)
                    .HasColumnName("payday_schedule")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.Payday)
                    .HasColumnName("payday")
                    .HasColumnType("date");
            modelBuilder.Entity<Client>()
                .Property(p => p.AltPayday)
                    .HasColumnName("alt_payday")
                    .HasColumnType("date");
            modelBuilder.Entity<Client>()
                .Property(p => p.PaydayNotes)
                    .HasColumnName("payday_notes")
                    .HasMaxLength(200)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.HasMc)
                    .HasColumnName("has_mc")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.Intl)
                    .HasColumnName("intl")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.InquireCode)
                    .HasColumnName("inquire_code")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Client>()
                .Property(p => p.TeletrackScore)
                    .HasColumnName("teletrack_score")
                    .HasColumnType("int");

            #endregion

            #region PaymentPlanCheck

            modelBuilder.Entity<PaymentPlanCheck>()
                .HasKey(p => new { p.Id })
                .ToTable("payment_plan_checks");
            // Properties:
            modelBuilder.Entity<PaymentPlanCheck>()
                .Property(p => p.Id)
                    .HasColumnName("id")
                    .IsRequired()
                    .HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)
                    .HasColumnType("uint");
            modelBuilder.Entity<PaymentPlanCheck>()
                .Property(p => p.TransactionId)
                    .HasColumnName("transaction_id")
                    .IsRequired()
                    .HasColumnType("uint");
            modelBuilder.Entity<PaymentPlanCheck>()
                .Property(p => p.SsNumber)
                    .HasColumnName("ss_number")
                    .IsRequired()
                    .HasMaxLength(11)
                    .HasColumnType("varchar");
            modelBuilder.Entity<PaymentPlanCheck>()
                .Property(p => p.Name)
                    .HasColumnName("name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("varchar");
            modelBuilder.Entity<PaymentPlanCheck>()
                .Property(p => p.TransDate)
                    .HasColumnName("trans_date")
                    .HasColumnType("datetime");
            modelBuilder.Entity<PaymentPlanCheck>()
                .Property(p => p.CheckNumber)
                    .HasColumnName("check_number")
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnType("varchar");
            modelBuilder.Entity<PaymentPlanCheck>()
                .Property(p => p.AmountRecieved)
                    .HasColumnName("amount_recieved")
                    .IsRequired()
                    .HasColumnType("decimal");
            modelBuilder.Entity<PaymentPlanCheck>()
                .Property(p => p.DateDue)
                    .HasColumnName("date_due")
                    .HasColumnType("datetime");
            modelBuilder.Entity<PaymentPlanCheck>()
                .Property(p => p.Status)
                    .HasColumnName("status")
                    .HasMaxLength(20)
                    .HasColumnType("varchar");
            modelBuilder.Entity<PaymentPlanCheck>()
                .Property(p => p.DateReturned)
                    .HasColumnName("date_returned")
                    .HasColumnType("datetime");
            modelBuilder.Entity<PaymentPlanCheck>()
                .Property(p => p.HoldDate)
                    .HasColumnName("hold_date")
                    .HasColumnType("datetime");
            modelBuilder.Entity<PaymentPlanCheck>()
                .Property(p => p.DateCleared)
                    .HasColumnName("date_cleared")
                    .HasColumnType("datetime");
            modelBuilder.Entity<PaymentPlanCheck>()
                .Property(p => p.TimeStamp)
                    .HasColumnName("time_stamp")
                    .IsRequired()
                    .HasColumnType("timestamp");
            modelBuilder.Entity<PaymentPlanCheck>()
                .Property(p => p.AmountPaid)
                    .HasColumnName("amount_paid")
                    .IsRequired()
                    .HasColumnType("decimal");
            modelBuilder.Entity<PaymentPlanCheck>()
                .Property(p => p.DatePaid)
                    .HasColumnName("date_paid")
                    .HasColumnType("date");
            modelBuilder.Entity<PaymentPlanCheck>()
                .Property(p => p.OrignalAmount)
                    .HasColumnName("orignal_amount")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");

            #endregion

            #region Payment

            modelBuilder.Entity<Payment>()
                .HasKey(p => new { p.Id })
                .ToTable("payments");
            // Properties:
            modelBuilder.Entity<Payment>()
                .Property(p => p.Id)
                    .HasColumnName("id")
                    .IsRequired()
                    .HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)
                    .HasColumnType("uint");
            modelBuilder.Entity<Payment>()
                .Property(p => p.TransactionId)
                    .HasColumnName("transaction_id")
                    .IsRequired()
                    .HasColumnType("bigint");
            modelBuilder.Entity<Payment>()
                .Property(p => p.Name)
                    .HasColumnName("name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Payment>()
                .Property(p => p.SsNumber)
                    .HasColumnName("ss_number")
                    .IsRequired()
                    .HasMaxLength(11)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Payment>()
                .Property(p => p.Description)
                    .HasColumnName("description")
                    .HasColumnType("text");
            modelBuilder.Entity<Payment>()
                .Property(p => p.DateDue)
                    .HasColumnName("date_due")
                    .HasColumnType("date");
            modelBuilder.Entity<Payment>()
                .Property(p => p.DatePaid)
                    .HasColumnName("date_paid")
                    .IsRequired()
                    .HasColumnType("date");
            modelBuilder.Entity<Payment>()
                .Property(p => p.AmountDue)
                    .HasColumnName("amount_due")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Payment>()
                .Property(p => p.AmountPaid)
                    .HasColumnName("amount_paid")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Payment>()
                .Property(p => p.OtherFees)
                    .HasColumnName("other_fees")
                    .HasMaxLength(100)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Payment>()
                .Property(p => p.Balance)
                    .HasColumnName("balance")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Payment>()
                .Property(p => p.Posted2Peach)
                    .HasColumnName("posted_2_peach")
                    .HasColumnType("text");
            modelBuilder.Entity<Payment>()
                .Property(p => p.Remarks)
                    .HasColumnName("remarks")
                    .HasColumnType("text");
            modelBuilder.Entity<Payment>()
                .Property(p => p.Location)
                    .HasColumnName("location")
                    .HasColumnType("text");
            modelBuilder.Entity<Payment>()
                .Property(p => p.PaymentNumber)
                    .HasColumnName("payment_number")
                    .HasColumnType("int");
            modelBuilder.Entity<Payment>()
                .Property(p => p.Walked)
                    .HasColumnName("walked")
                    .HasColumnType("text");
            modelBuilder.Entity<Payment>()
                .Property(p => p.PaymentType)
                    .HasColumnName("payment_type")
                    .HasMaxLength(50)
                    .HasColumnType("varchar");

            #endregion

            #region ReferredBy

            modelBuilder.Entity<ReferredBy>()
                .HasKey(p => new { p.Id })
                .ToTable("referred_by", "southdenver");
            // Properties:
            modelBuilder.Entity<ReferredBy>()
                .Property(p => p.Id)
                    .HasColumnName("id")
                    .IsRequired()
                    .HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)
                    .HasColumnType("uint");
            modelBuilder.Entity<ReferredBy>()
                .Property(p => p.Referred)
                    .HasColumnName("referred")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");

            #endregion

            #region Transaction

            modelBuilder.Entity<Transaction>()
                .HasKey(p => new { p.Id })
                .ToTable("transactions");
            // Properties:
            modelBuilder.Entity<Transaction>()
                .Property(p => p.Id)
                    .HasColumnName("id")
                    .IsRequired()
                    .HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)
                    .HasColumnType("uint");
            modelBuilder.Entity<Transaction>()
                .Property(p => p.SsNumber)
                    .HasColumnName("ss_number")
                    .IsRequired()
                    .HasMaxLength(11)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Transaction>()
                .Property(p => p.Name)
                    .HasColumnName("name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Transaction>()
                .Property(p => p.Issuer)
                    .HasColumnName("issuer")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Transaction>()
                .Property(p => p.TransDate)
                    .HasColumnName("trans_date")
                    .HasColumnType("datetime");
            modelBuilder.Entity<Transaction>()
                .Property(p => p.CheckNumber)
                    .HasColumnName("check_number")
                    .IsRequired()
                    .HasColumnType("int");
            modelBuilder.Entity<Transaction>()
                .Property(p => p.AmountRecieved)
                    .HasColumnName("amount_recieved")
                    .IsRequired()
                    .HasColumnType("decimal");
            modelBuilder.Entity<Transaction>()
                .Property(p => p.AmountDispursed)
                    .HasColumnName("amount_dispursed")
                    .IsRequired()
                    .HasColumnType("decimal");
            modelBuilder.Entity<Transaction>()
                .Property(p => p.DispursedAs)
                    .HasColumnName("dispursed_as")
                    .HasMaxLength(10)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Transaction>()
                .Property(p => p.DateDue)
                    .HasColumnName("date_due")
                    .HasColumnType("datetime");
            modelBuilder.Entity<Transaction>()
                .Property(p => p.CheckType)
                    .HasColumnName("check_type")
                    .HasColumnType("int");
            modelBuilder.Entity<Transaction>()
                .Property(p => p.Status)
                    .HasColumnName("status")
                    .HasMaxLength(20)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Transaction>()
                .Property(p => p.DateReturned)
                    .HasColumnName("date_returned")
                    .HasColumnType("datetime");
            modelBuilder.Entity<Transaction>()
                .Property(p => p.HoldDate)
                    .HasColumnName("hold_date")
                    .HasColumnType("datetime");
            modelBuilder.Entity<Transaction>()
                .Property(p => p.Location)
                    .HasColumnName("location")
                    .HasColumnType("text");
            modelBuilder.Entity<Transaction>()
                .Property(p => p.DateCleared)
                    .HasColumnName("date_cleared")
                    .HasColumnType("datetime");
            modelBuilder.Entity<Transaction>()
                .Property(p => p.TimeStamp)
                    .HasColumnName("time_stamp")
                    .IsRequired()
                    .HasColumnType("timestamp");
            modelBuilder.Entity<Transaction>()
                .Property(p => p.Consecutive)
                    .HasColumnName("consecutive")
                    .HasColumnType("uint");

            #endregion

            #region Notes

            modelBuilder.Entity<Notes>()
                .HasKey(p => new { p.Id })
                .ToTable("notes");
            // Properties:
            modelBuilder.Entity<Notes>()
                .Property(p => p.Id)
                    .HasColumnName("id")
                    .IsRequired()
                    .HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)
                    .HasColumnType("uint");
            modelBuilder.Entity<Notes>()
                .Property(p => p.Note)
                    .HasColumnName("note")
                    .IsRequired()
                    .HasColumnType("text");
            modelBuilder.Entity<Notes>()
                .Property(p => p.SsNumber)
                    .HasColumnName("ss_number")
                    .IsRequired()
                    .HasColumnType("varchar");

            #endregion

            #region Collect

            modelBuilder.Entity<Collect>()
                .HasKey(p => new { p.Id })
                .ToTable("collect");
            // Properties:
            modelBuilder.Entity<Collect>()
                .Property(p => p.Id)
                    .HasColumnName("id")
                    .IsRequired()
                    .HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity)
                    .HasColumnType("uint");
            modelBuilder.Entity<Collect>()
                .Property(p => p.TransactionId)
                    .HasColumnName("transaction_id")
                    .IsRequired()
                    .HasColumnType("uint");
            modelBuilder.Entity<Collect>()
                .Property(p => p.PaymentNumber)
                    .HasColumnName("payment_number")
                    .IsRequired()
                    .HasColumnType("uint");
            modelBuilder.Entity<Collect>()
                .Property(p => p.MultipleNSF)
                    .HasColumnName("multiple_nsf")
                    .IsRequired()
                    .HasColumnType("uint");
            modelBuilder.Entity<Collect>()
                .Property(p => p.Name)
                    .HasColumnName("name")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Collect>()
                .Property(p => p.SsNumber)
                    .HasColumnName("ss_number")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Collect>()
                .Property(p => p.Letter1)
                    .HasColumnName("letter_1")
                    .HasColumnType("date");
            modelBuilder.Entity<Collect>()
                .Property(p => p.Letter2)
                    .HasColumnName("letter_2")
                    .HasColumnType("date");
            modelBuilder.Entity<Collect>()
                .Property(p => p.Letter3)
                    .HasColumnName("letter_3")
                    .HasColumnType("date");
            modelBuilder.Entity<Collect>()
                .Property(p => p.RightToCure)
                    .HasColumnName("right_to_cure")
                    .HasColumnType("date");
            modelBuilder.Entity<Collect>()
                .Property(p => p.Followup1)
                    .HasColumnName("followup_1")
                    .HasColumnType("date");
            modelBuilder.Entity<Collect>()
                .Property(p => p.Followup2)
                    .HasColumnName("followup_2")
                    .HasColumnType("date");
            modelBuilder.Entity<Collect>()
                .Property(p => p.NextPmtDue)
                    .HasColumnName("next_pmt_due")
                    .HasColumnType("date");
            modelBuilder.Entity<Collect>()
                .Property(p => p.PaymentAgreement)
                    .HasColumnName("payment_agreement")
                    .HasColumnType("date");
            modelBuilder.Entity<Collect>()
                .Property(p => p.ACHProjectedDate)
                    .HasColumnName("ACH_projected_date")
                    .HasColumnType("date");
            modelBuilder.Entity<Collect>()
                .Property(p => p.ACHSubmittedDate)
                    .HasColumnName("ACH_submitted_date")
                    .HasColumnType("date");
            modelBuilder.Entity<Collect>()
                .Property(p => p.ACHAmount)
                    .HasColumnName("ACH_amount")
                    .HasColumnType("decimal"); 
            modelBuilder.Entity<Collect>()
                .Property(p => p.OutsoucedDate)
                    .HasColumnName("Outsouced_date")
                    .HasColumnType("date");
            modelBuilder.Entity<Collect>()
                .Property(p => p.OutsourcedName)
                    .HasColumnName("Outsourced_name")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Collect>()
                .Property(p => p.BankVerified)
                    .HasColumnName("Bank_verified")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Collect>()
                .Property(p => p.EmploymentVerified)
                    .HasColumnName("Employment_verified")
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Collect>()
                .Property(p => p.EmploymentVerifiedDate)
                    .HasColumnName("Employment_verified_date")
                    .HasColumnType("date");
            modelBuilder.Entity<Collect>()
                .Property(p => p.ACH2ProjectedDate)
                    .HasColumnName("ACH2_projected_date")
                    .HasColumnType("date");
            modelBuilder.Entity<Collect>()
                .Property(p => p.ACH2SubmittedDate)
                    .HasColumnName("ACH2_submitted_date")
                    .HasColumnType("date");
            modelBuilder.Entity<Collect>()
                .Property(p => p.ACH2Amount)
                    .HasColumnName("ACH2_amount")
                    .HasColumnType("decimal"); 

            #endregion

            #region Disabled conventions


            #endregion

            #region Search
            modelBuilder.Entity<Search>()
                .HasKey(p => new { p.SsNumber })
                .ToTable("search_clients");
            // Properties:
            modelBuilder.Entity<Search>()
                .Property(p => p.Name)
                    .HasColumnName("name")
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnType("varchar");
            modelBuilder.Entity<Search>()
                .Property(p => p.SsNumber)
                    .HasColumnName("ss_number")
                    .IsRequired()
                    .HasMaxLength(45)
                    .HasColumnType("varchar");
            #endregion

        }
    
        /// <summary>
        /// There are no comments for AuxClient in the schema.
        /// </summary>
        public DbSet<AuxClient> AuxClients { get; set; }
    
        /// <summary>
        /// There are no comments for Bounced in the schema.
        /// </summary>
        public DbSet<Bounced> Bounceds { get; set; }
    
        /// <summary>
        /// There are no comments for CardTransaction in the schema.
        /// </summary>
        public DbSet<CardTransaction> CardTransactions { get; set; }
    
        /// <summary>
        /// There are no comments for CashLog in the schema.
        /// </summary>
        public DbSet<CashLog> CashLogs { get; set; }
    
        /// <summary>
        /// There are no comments for Checkbook in the schema.
        /// </summary>
        public DbSet<Checkbook> Checkbooks { get; set; }
    
        /// <summary>
        /// There are no comments for Client in the schema.
        /// </summary>
        public DbSet<Client> Clients { get; set; }
    
        /// <summary>
        /// There are no comments for PaymentPlanCheck in the schema.
        /// </summary>
        public DbSet<PaymentPlanCheck> PaymentPlanChecks { get; set; }
    
        /// <summary>
        /// There are no comments for Payment in the schema.
        /// </summary>
        public DbSet<Payment> Payments { get; set; }
    
        /// <summary>
        /// There are no comments for ReferredBy in the schema.
        /// </summary>
        public DbSet<ReferredBy> ReferredBies { get; set; }
    
        /// <summary>
        /// There are no comments for Transaction in the schema.
        /// </summary>
        public DbSet<Transaction> Transactions { get; set; }

        public DbSet<Notes> CustomerNotes { get; set; }

        public DbSet<Collect> Collects { get; set; }

        public DbSet<Search> Searches { get; set; }

    }
    #endregion
}

namespace LoanStopModel
{

    /// <summary>
    /// 
    /// </summary>
    public partial class AuxClient    {

        public AuxClient()
        {
          this.SsNumber = @"";
          this.Master = @"";
        }

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for SsNumber in the schema.
        /// </summary>
        public virtual string SsNumber
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for JointAccountId in the schema.
        /// </summary>
        public virtual string JointAccountId
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Master in the schema.
        /// </summary>
        public virtual string Master
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        public virtual string Email
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Dob in the schema.
        /// </summary>
        public virtual string Dob
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Occupation in the schema.
        /// </summary>
        public virtual string Occupation
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Deposits in the schema.
        /// </summary>
        public virtual string Deposits
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for NetFromPaystubs in the schema.
        /// </summary>
        public virtual string NetFromPaystubs
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for RoutingNumber in the schema.
        /// </summary>
        public virtual string RoutingNumber
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for CellPhone in the schema.
        /// </summary>
        public virtual string CellPhone
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for MonthlyFundsAvailable in the schema.
        /// </summary>
        public virtual string MonthlyFundsAvailable
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for PreferredContactMethod in the schema.
        /// </summary>
        public virtual string PreferredContactMethod
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for DateFromPaystub in the schema.
        /// </summary>
        public virtual string DateFromPaystub
        {
            get;
            set;
        }


        #endregion
    }

    /// <summary>
    /// 
    /// </summary>
    public partial class Bounced    {

        public Bounced()
        {
          this.Name = @"";
          this.TransId = @"";
          this.CheckNumber = @"";
          this.BounceType = @"";
        }

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        public virtual string Name
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for TransId in the schema.
        /// </summary>
        public virtual string TransId
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for CheckNumber in the schema.
        /// </summary>
        public virtual string CheckNumber
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for BounceType in the schema.
        /// </summary>
        public virtual string BounceType
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for DateBounced in the schema.
        /// </summary>
        public virtual global::System.DateTime DateBounced
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for DatePaid in the schema.
        /// </summary>
        public virtual global::System.DateTime DatePaid
        {
            get;
            set;
        }


        #endregion
    }

    /// <summary>
    /// 
    /// </summary>
    public partial class CardTransaction    {

        public CardTransaction()
        {
          this.SsNumber = @"";
          this.Trnx = @"";
          this.LoadAmount = @"";
          this.Fee = @"";
          this.Total = @"";
          this.FeeDue = @"";
          this.TotalDue = @"";
          this.TrnxId = @"";
        }

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for SsNumber in the schema.
        /// </summary>
        public virtual string SsNumber
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Datetime in the schema.
        /// </summary>
        public virtual global::System.DateTime Datetime
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Trnx in the schema.
        /// </summary>
        public virtual string Trnx
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for LoadAmount in the schema.
        /// </summary>
        public virtual string LoadAmount
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Fee in the schema.
        /// </summary>
        public virtual string Fee
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Total in the schema.
        /// </summary>
        public virtual string Total
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for FeeDue in the schema.
        /// </summary>
        public virtual string FeeDue
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for TotalDue in the schema.
        /// </summary>
        public virtual string TotalDue
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for TrnxId in the schema.
        /// </summary>
        public virtual string TrnxId
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        public virtual string Status
        {
            get;
            set;
        }


        #endregion
    }

    /// <summary>
    /// 
    /// </summary>
    public partial class CashLog    {

        public CashLog()
        {
          this.TransactionType = @"";
          this.Amount = 0.00m;
          this.Description = @"";
          this.Employee = @"";
          this.Cleared = 0;
        }

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for TransactionType in the schema.
        /// </summary>
        public virtual string TransactionType
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        public virtual decimal Amount
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        public virtual string Description
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Employee in the schema.
        /// </summary>
        public virtual string Employee
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Date in the schema.
        /// </summary>
        public virtual global::System.DateTime Date
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Timestamp in the schema.
        /// </summary>
        public virtual global::System.DateTime Timestamp
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for SsNumber in the schema.
        /// </summary>
        public virtual string SsNumber
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for PayableTo in the schema.
        /// </summary>
        public virtual string PayableTo
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for TransactionNumber in the schema.
        /// </summary>
        public virtual global::System.Nullable<long> TransactionNumber
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        public virtual string Type
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        public virtual string Category
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Cleared in the schema.
        /// </summary>
        public virtual byte Cleared
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for DateCleared in the schema.
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> DateCleared
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for ClearedBy in the schema.
        /// </summary>
        public virtual string ClearedBy
        {
            get;
            set;
        }


        #endregion
    }

    /// <summary>
    /// 
    /// </summary>
    public partial class Checkbook    {

        public Checkbook()
        {
          this.TransactionType = @"";
          this.CheckNumber = 0;
          this.PayableTo = @"";
          this.Amount = 0.00m;
          this.Type = @"";
        }

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for TransactionType in the schema.
        /// </summary>
        public virtual string TransactionType
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for CheckNumber in the schema.
        /// </summary>
        public virtual long CheckNumber
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for DateEntered in the schema.
        /// </summary>
        public virtual global::System.DateTime DateEntered
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for PayableTo in the schema.
        /// </summary>
        public virtual string PayableTo
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        public virtual string Description
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Amount in the schema.
        /// </summary>
        public virtual decimal Amount
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        public virtual string Type
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        public virtual string Category
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Employee in the schema.
        /// </summary>
        public virtual string Employee
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for DateTime in the schema.
        /// </summary>
        public virtual global::System.DateTime DateTime
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Cleared in the schema.
        /// </summary>
        public virtual sbyte Cleared
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for SsNumber in the schema.
        /// </summary>
        public virtual string SsNumber
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for DateCleared in the schema.
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> DateCleared
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for ClearedBy in the schema.
        /// </summary>
        public virtual string ClearedBy
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for TransactionNumber in the schema.
        /// </summary>
        public virtual global::System.Nullable<long> TransactionNumber
        {
            get;
            set;
        }


        #endregion
    }

    /// <summary>
    /// 
    /// </summary>
    public partial class Client    {

        public Client()
        {
          this.SsNumber = @"";
          this.Lastname = @"";
          this.Firstname = @"";
          this.DriverLicense = @"";
          this.Employer = @"";
          this.Status = @"0";
          this.Address = @"";
          this.City = @"";
          this.State = @"";
          this.Zip = @"";
          this.HomePhone = @"";
          this.PaydaySchedule = @"";
          this.PaydayNotes = @"";
          this.HasMc = @"No";
          this.Intl = @"No";
        }

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for SsNumber in the schema.
        /// </summary>
        public virtual string SsNumber
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Lastname in the schema.
        /// </summary>
        public virtual string Lastname
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Firstname in the schema.
        /// </summary>
        public virtual string Firstname
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Mi in the schema.
        /// </summary>
        public virtual string Mi
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for DriverLicense in the schema.
        /// </summary>
        public virtual string DriverLicense
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Employer in the schema.
        /// </summary>
        public virtual string Employer
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for DateOpened in the schema.
        /// </summary>
        public virtual global::System.DateTime DateOpened
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for ApprovedBy in the schema.
        /// </summary>
        public virtual string ApprovedBy
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        public virtual string Status
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        public virtual string Address
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        public virtual string City
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for State in the schema.
        /// </summary>
        public virtual string State
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Zip in the schema.
        /// </summary>
        public virtual string Zip
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for HomePhone in the schema.
        /// </summary>
        public virtual string HomePhone
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for WorkPhone in the schema.
        /// </summary>
        public virtual string WorkPhone
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for BankName in the schema.
        /// </summary>
        public virtual string BankName
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for BankAccount in the schema.
        /// </summary>
        public virtual string BankAccount
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for CheckLimit in the schema.
        /// </summary>
        public virtual string CheckLimit
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for AccountLimit in the schema.
        /// </summary>
        public virtual string AccountLimit
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Store in the schema.
        /// </summary>
        public virtual string Store
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for ReferredBy in the schema.
        /// </summary>
        public virtual string ReferredBy
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for UpdatedInfoDate in the schema.
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> UpdatedInfoDate
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for PaydaySchedule in the schema.
        /// </summary>
        public virtual string PaydaySchedule
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Payday in the schema.
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> Payday
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for AltPayday in the schema.
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> AltPayday
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for PaydayNotes in the schema.
        /// </summary>
        public virtual string PaydayNotes
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for HasMc in the schema.
        /// </summary>
        public virtual string HasMc
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Intl in the schema.
        /// </summary>
        public virtual string Intl
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for InquireCode in the schema.
        /// </summary>
        public virtual string InquireCode
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for TeletrackScore in the schema.
        /// </summary>
        public virtual global::System.Nullable<int> TeletrackScore
        {
            get;
            set;
        }


        #endregion
    }

    /// <summary>
    /// 
    /// </summary>
    public partial class Notes
    {

        public Notes()
        {
            this.SsNumber = @"";
            this.Note = @"";
        }

        #region Properties

        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }


        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        public virtual string Note
        {
            get;
            set;
        }


        /// <summary>
        /// There are no comments for TransId in the schema.
        /// </summary>
        public virtual string SsNumber
        {
            get;
            set;
        }

        #endregion
    }

    /// <summary>
    /// There are no comments for LoanStopModel.PaymentPlanCheck in the schema.
    /// </summary>
    public partial class PaymentPlanCheck    {

        public PaymentPlanCheck()
        {
          this.TransactionId = 0;
          this.SsNumber = @"";
          this.Name = @"";
          this.CheckNumber = @"";
          this.AmountRecieved = 0.00m;
          this.AmountPaid = 0.00m;
          this.OrignalAmount = @"";
        }

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for TransactionId in the schema.
        /// </summary>
        public virtual long TransactionId
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for SsNumber in the schema.
        /// </summary>
        public virtual string SsNumber
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        public virtual string Name
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for TransDate in the schema.
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> TransDate
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for CheckNumber in the schema.
        /// </summary>
        public virtual string CheckNumber
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for AmountRecieved in the schema.
        /// </summary>
        public virtual decimal AmountRecieved
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for DateDue in the schema.
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> DateDue
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        public virtual string Status
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for DateReturned in the schema.
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> DateReturned
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for HoldDate in the schema.
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> HoldDate
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for DateCleared in the schema.
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> DateCleared
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for TimeStamp in the schema.
        /// </summary>
        public virtual global::System.DateTime TimeStamp
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for AmountPaid in the schema.
        /// </summary>
        public virtual decimal AmountPaid
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for DatePaid in the schema.
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> DatePaid
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for OrignalAmount in the schema.
        /// </summary>
        public virtual string OrignalAmount
        {
            get;
            set;
        }


        #endregion
    }

    /// <summary>
    /// There are no comments for LoanStopModel.Payment in the schema.
    /// </summary>
    public partial class Payment    {

        public Payment()
        {
          this.TransactionId = 0;
          this.Name = @"";
          this.SsNumber = @"";
          this.AmountDue = @"";
          this.AmountPaid = @"";
          this.Balance = @"";
        }

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for TransactionId in the schema.
        /// </summary>
        public virtual long TransactionId
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        public virtual string Name
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for SsNumber in the schema.
        /// </summary>
        public virtual string SsNumber
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        public virtual string Description
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for DateDue in the schema.
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> DateDue
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for DatePaid in the schema.
        /// </summary>
        public virtual global::System.DateTime DatePaid
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for AmountDue in the schema.
        /// </summary>
        public virtual string AmountDue
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for AmountPaid in the schema.
        /// </summary>
        public virtual string AmountPaid
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for OtherFees in the schema.
        /// </summary>
        public virtual string OtherFees
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Balance in the schema.
        /// </summary>
        public virtual string Balance
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Posted2Peach in the schema.
        /// </summary>
        public virtual string Posted2Peach
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Remarks in the schema.
        /// </summary>
        public virtual string Remarks
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Location in the schema.
        /// </summary>
        public virtual string Location
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for PaymentNumber in the schema.
        /// </summary>
        public virtual global::System.Nullable<int> PaymentNumber
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Walked in the schema.
        /// </summary>
        public virtual string Walked
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for PaymentType in the schema.
        /// </summary>
        public virtual string PaymentType
        {
            get;
            set;
        }


        #endregion
    }

    /// <summary>
    /// There are no comments for LoanStopModel.ReferredBy in the schema.
    /// </summary>
    public partial class ReferredBy    {

        public ReferredBy()
        {
          this.Referred = @"";
        }

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Referred in the schema.
        /// </summary>
        public virtual string Referred
        {
            get;
            set;
        }


        #endregion
    }

    /// <summary>
    /// There are no comments for LoanStopModel.Transaction in the schema.
    /// </summary>
    public partial class Transaction    {

        public Transaction()
        {
          this.SsNumber = @"";
          this.Name = @"";
          this.Issuer = @"";
          this.CheckNumber = 0;
          this.AmountRecieved = 0.00m;
          this.AmountDispursed = 0.00m;
        }

        #region Properties
    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for SsNumber in the schema.
        /// </summary>
        public virtual string SsNumber
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        public virtual string Name
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Issuer in the schema.
        /// </summary>
        public virtual string Issuer
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for TransDate in the schema.
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> TransDate
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for CheckNumber in the schema.
        /// </summary>
        public virtual int CheckNumber
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for AmountRecieved in the schema.
        /// </summary>
        public virtual decimal AmountRecieved
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for AmountDispursed in the schema.
        /// </summary>
        public virtual decimal AmountDispursed
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for DispursedAs in the schema.
        /// </summary>
        public virtual string DispursedAs
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for DateDue in the schema.
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> DateDue
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for CheckType in the schema.
        /// </summary>
        public virtual global::System.Nullable<int> CheckType
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        public virtual string Status
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for DateReturned in the schema.
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> DateReturned
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for HoldDate in the schema.
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> HoldDate
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Location in the schema.
        /// </summary>
        public virtual string Location
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for DateCleared in the schema.
        /// </summary>
        public virtual global::System.Nullable<System.DateTime> DateCleared
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for TimeStamp in the schema.
        /// </summary>
        public virtual global::System.DateTime TimeStamp
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Consecutive in the schema.
        /// </summary>
        public virtual global::System.Nullable<long> Consecutive
        {
            get;
            set;
        }


        #endregion
    }

    public partial class Collect
    {

        public Collect()
        {
            this.SsNumber = @"";
            this.Name = @"";
            this.ACHAmount = 0;
            this.ACH2Amount = 0.00m;
        }

        #region Properties

        public virtual long Id
        {
            get;
            set;
        }

        public virtual long TransactionId
        {
            get;
            set;
        }

        public virtual long PaymentNumber
        {
            get;
            set;
        }

        public virtual long MultipleNSF
        {
            get;
            set;
        }

        public virtual string Name
        {
            get;
            set;
        }

        public virtual string SsNumber
        {
            get;
            set;
        }

        public virtual global::System.Nullable<System.DateTime> Letter1
        {
            get;
            set;
        }

        public virtual global::System.Nullable<System.DateTime> Letter2
        {
            get;
            set;
        }

        public virtual global::System.Nullable<System.DateTime> Letter3
        {
            get;
            set;
        }

        public virtual global::System.Nullable<System.DateTime> RightToCure
        {
            get;
            set;
        }

        public virtual global::System.Nullable<System.DateTime> Followup1
        {
            get;
            set;
        }

        public virtual global::System.Nullable<System.DateTime> Followup2
        {
            get;
            set;
        }

        public virtual global::System.Nullable<System.DateTime> NextPmtDue
        {
            get;
            set;
        }

        public virtual global::System.Nullable<System.DateTime> PaymentAgreement
        {
            get;
            set;
        }

        public virtual global::System.Nullable<System.DateTime> ACHProjectedDate
        {
            get;
            set;
        }

        public virtual global::System.Nullable<System.DateTime> ACHSubmittedDate
        {
            get;
            set;
        }

        public virtual global::System.Nullable<System.Decimal> ACHAmount
        {
            get;
            set;
        }

        public virtual global::System.Nullable<System.DateTime> OutsoucedDate
        {
            get;
            set;
        }

        public virtual string OutsourcedName
        {
            get;
            set;
        }

        public virtual string BankVerified
        {
            get;
            set;
        }

        public virtual string EmploymentVerified
        {
            get;
            set;
        }

        public virtual global::System.Nullable<System.DateTime> EmploymentVerifiedDate
        {
            get;
            set;
        }

        public virtual global::System.Nullable<System.DateTime> ACH2ProjectedDate
        {
            get;
            set;
        }

        public virtual global::System.Nullable<System.DateTime> ACH2SubmittedDate
        {
            get;
            set;
        }

        public virtual global::System.Nullable<System.Decimal> ACH2Amount
        {
            get;
            set;
        }

        #endregion
    }

    public partial class Search
    {

        public Search()
        {
            this.Name = @"";
            this.SsNumber = @"";
        }

        #region Properties

        public virtual string Name
        {
            get;
            set;
        }

        public virtual string SsNumber
        {
            get;
            set;
        }

        #endregion
    }

}
